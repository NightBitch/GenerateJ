<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Generates the code behind file for a module New page." %>
<%@ Property Name="NameSpace" Type="String" Default="He3" Category="EntityClass" Description="The assembly that contains the entity class." %>
<%@ Property Name="ModuleName" Type="String" Category="EntityClass" Description="The module name of current module, for example, 'User Admin'" %>
<%@ Property Name="ClassName" Type="String"  Category="EntityClass" Description="The editing entity class name, for example, 'User'" %>
<%@ Property Name="Mapping" Type="He3.CodeSmith.MappingProperty" Category="Mapping" Description="The O/R mapping settings." %>
<%@ Assembly Name="He3.CodeSmith" %>
<%@ Import Namespace="He3.CodeSmith" %>
<%@ Import Namespace="System.Text" %>

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using NPOI.SS.UserModel;
using <%=NameSpace%>.Core.Model;
using <%=NameSpace%>.Core.Model.Exception;
using <%=NameSpace%>.Core.Utility;
using <%=NameSpace%>.Model.<%=ModuleName%>;
using <%=NameSpace%>.Utility;
using <%=NameSpace%>.Web;
using <%=NameSpace%>.Application.Base;

public partial class <%=ClassName%>_New : ModuleBase
{
    public event EventHandler Back;
    public event EventHandler Create;

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
        }
    }

    protected void btnBack_Click(object sender, EventArgs e)
    {
        if (Back != null)
        {
            Back(this, e);
        }
    }

    public void PageCleanup()
    {
        <% 
        foreach (MappingInfo mappingInfo in this.Mapping.MappingInfoCollection) 
        {
            if (mappingInfo.PKGenerator=="identity")
            {
                continue;
            }
            if (mappingInfo.DataType == "Boolean")
        	{
            %>
        cb<%=mappingInfo.ClassPropertyName%>.Checked = true;
        	<%
        	}
            else
        	{
             %>
        tb<%=mappingInfo.ClassPropertyName%>.Text = string.Empty;
        	<%
        	}
        } 
        %>
    }

    protected void btnInsert_Click(object sender, EventArgs e)
    {
        try
        {
            var dataItem = new <%=ClassName%>();
        <% 
        foreach (MappingInfo mappingInfo in this.Mapping.MappingInfoCollection) 
        {
            if (mappingInfo.PKGenerator=="identity")
            {
                continue;
            }
            if (mappingInfo.DataType != "Boolean")
        	{
            %>
            tb<%=mappingInfo.ClassPropertyName%>.Text = tb<%=mappingInfo.ClassPropertyName%>.Text.Trim();
                <% 
                if(mappingInfo.DataType != "String")
                {
                %>
            dataItem.<%=mappingInfo.ClassPropertyName%> = Convert.To<%=mappingInfo.DataType%>(tb<%=mappingInfo.ClassPropertyName%>.Text);
                <%
                }
                else
            	{
                %>
            dataItem.<%=mappingInfo.ClassPropertyName%> = tb<%=mappingInfo.ClassPropertyName%>.Text;
            <%
            	}
        	}
            else
        	{
                %>
        	dataItem.<%=mappingInfo.ClassPropertyName%> = cb<%=mappingInfo.ClassPropertyName%>.Checked;
               <%
        	}
        } 
        %>
            TheGenericMgr.Create(dataItem, CurrentUser.Code);

            ShowSuccessMessage("创建成功");
            if (Create != null)
            {
                Create(dataItem, e);
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage(ex);
        }
    }
    
    protected void btnImport_OnClick(object sender, EventArgs e)
    {
        try
        {
            this.Import<%=ClassName%>(fileUpload.PostedFile.InputStream, this.CurrentUser);
            ShowSuccessMessage("MasterData.Item.Import.Successfully");
        }
        catch (Exception ex)
        {
            ShowErrorMessage(ex);
        }
    }

    #region Import<%=ClassName%>
    public void Import<%=ClassName%>(Stream inputStream, User user)
    {
        #region
        if (inputStream.Length == 0)
        {
            throw new BusinessErrorException("Import.Stream.Empty");
        }

        IWorkbook workbook = WorkbookFactory.Create(inputStream);

        ISheet sheet = workbook.GetSheetAt(0);
        IEnumerator rows = sheet.GetRowEnumerator();

        ImportHelper.JumpRows(rows, 1);
        var errorMessages = new List<string>();
        int colCount = 0;
        var rowDataList = new List<<%=ClassName%>>();
        #endregion

        #region 列定义
        <% 
        int i = 1;
        foreach (MappingInfo mappingInfo in this.Mapping.MappingInfoCollection) 
        {
            if (string.IsNullOrWhiteSpace(mappingInfo.ColumnText))
            {
                continue;
            }
        %>
        int col<%=mappingInfo.ClassPropertyName%> = <%=i%>; //<%=mappingInfo.ColumnText %>
        <%
            i++;
        } 
        %>
        #endregion

        #region 读取数据
        while (rows.MoveNext())
        {
            var row = (IRow)rows.Current;
            if (!ImportHelper.CheckValidDataRow(row, 0, <%=i%>))
            {
                break; //边界
            }
            colCount++;

            bool hasError = false;
            var rowData = new <%=ClassName%>();

            #region

            <% 
            foreach (MappingInfo mappingInfo in this.Mapping.MappingInfoCollection) 
            {
                if (string.IsNullOrWhiteSpace(mappingInfo.ColumnText))
                {
                    continue;
                }
                string nullable = string.Empty;
                string dataLength = string.Empty;
                string vType = string.Empty;
                 
                if (mappingInfo.IsPK || !mappingInfo.IsNullable)
            	{
            		 nullable =string.Format(@"
                if (s{0} == null)
                {{
                    errorMessages.Add(string.Format(""第{{0}}行{1}不能为空"", colCount));
                    hasError = true;
                }}", mappingInfo.ClassPropertyName, mappingInfo.ColumnText);
            	}
                
                if (mappingInfo.DataType=="String")
            	{
                    dataLength=string.Format(@"
                if (s{0} != null && s{0}.Length > {1})
                {{
                    errorMessages.Add(string.Format(""第{{0}}行{2}长度超过了{1}"", colCount));
                    hasError = true;
                }}", mappingInfo.ClassPropertyName,mappingInfo.DataLength,mappingInfo.ColumnText);
                    vType= string.Format("rowData.{0} = s{0};",mappingInfo.ClassPropertyName);
            	}
                else if (mappingInfo.DataType=="Boolean")
            	{
                    vType=string.Format(@"
                    {1} i{0} = true;
                    {1}.TryParse(s{0}, out i{0});
                    rowData.{0} = i{0};
                    ",mappingInfo.ClassPropertyName,mappingInfo.DataType);
                }
                else
            	{
                    vType=string.Format(@"
                    {1} i{0} = {1}.MinValue;
                    {1}.TryParse(s{0}, out i{0});
                    rowData.{0} = i{0};
                    ",mappingInfo.ClassPropertyName,mappingInfo.DataType);
            	}
            %>
            string s<%=mappingInfo.ClassPropertyName%> = ImportHelper.GetCellStringValue(row.GetCell(col<%=mappingInfo.ClassPropertyName%>));
            <%=nullable%>
            <%=dataLength%>
            <%=vType%>
            
            <%
            } 
            
            %>

            #endregion

            if (!hasError)
            {
                rowDataList.Add(rowData);
            }
        }

        #endregion

        if (!rowDataList.Any())
        {
            errorMessages.Add("没有找到有效的数据.");
            throw new BusinessErrorException(string.Format("导入时出现错误:{0}",
                string.Join(",", errorMessages.Distinct().ToArray())));
        }

        <%
        var paramKeys = string.Empty;
        foreach (MappingInfo mappingInfo in Mapping.MappingInfoCollection)
        {
            if (mappingInfo.IsPK)
        	{
        		paramKeys += string.Format(@"rowData.{0},", mappingInfo.ClassPropertyName);
        	}
        } 
        paramKeys= paramKeys.Substring(0,paramKeys.Length - 1);
        %>
        
        #region 验证重复明细
        var dataRowGroup = rowDataList.GroupBy(rowData => new { <%=paramKeys%> }).Where(p => p.Count() > 1).Select(p => new { p.Key });
        foreach (var dataRow in dataRowGroup)
        {
            errorMessages.Add(string.Format("存在重复的明细:{0}", dataRow.Key));
        }
        #endregion

        if (errorMessages.Any())
        {
            throw new BusinessErrorException(string.Format("导入时出现错误:{0}",
                string.Join(",", errorMessages.Distinct().ToArray())));
        }
        foreach (var rowData in rowDataList)
        {
            var entityParam = new object[] { <%=paramKeys%> };
            <%
            string wheresql = " where ";
            foreach (MappingInfo mappingInfo in this.Mapping.MappingInfoCollection) 
            {
                if (mappingInfo.IsPK)
            	{
            		wheresql += string.Format(" {0} =? and", mappingInfo.ClassPropertyName);
            	}
            }
            wheresql= wheresql.Substring(0, wheresql.Length - 3);
            %>
            var list = TheGenericMgr.FindAll<<%=ClassName%>>(" from <%=ClassName%> <%=wheresql%> ", entityParam);
            if (list != null && list.Any())
            {
                var entity = list[0];
        
                <%
                foreach (MappingInfo mappingInfo in Mapping.MappingInfoCollection)
                {
                    if (string.IsNullOrWhiteSpace(mappingInfo.ColumnText))
                    {
                        continue;
                    }
                %>
            	entity.<%=mappingInfo.ClassPropertyName%>= rowData.<%=mappingInfo.ClassPropertyName%>;
                <%
                } 
                %>
                TheGenericMgr.Update(entity);
            }
            else
            {
                TheGenericMgr.Create(rowData);
            }
        }
    }
    #endregion
}